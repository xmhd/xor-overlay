From 83f2a055502345d2e95fa125d651385eaa424cb6 Mon Sep 17 00:00:00 2001
From: Kris Van Hees <kris.van.hees@oracle.com>
Date: Mon, 19 Nov 2018 16:55:11 +0000
Subject: [PATCH 06/20] dtrace: systrace provider core components

This implements the core (linked-in) components of the DTrace systrace
provider, which intercepts system call invocations.  As previously,
the arch-dependent pieces needed for x86 are also provided.

Signed-off-by: Nick Alcock <nick.alcock@oracle.com>
Signed-off-by: Kris Van Hees <kris.van.hees@oracle.com>
Signed-off-by: Tomas Jedlicka <tomas.jedlicka@oracle.com>
Signed-off-by: Eugene Loh <eugene.loh@oracle.com>
Signed-off-by: David Mc Lean <david.mclean@oracle.com>
Signed-off-by: Vincent Lim <vincent.lim@oracle.com>
---
 arch/x86/entry/syscall_32.c                 |  4 +
 arch/x86/entry/syscall_64.c                 |  4 +
 arch/x86/include/asm/dtrace_syscall.h       |  3 +
 arch/x86/include/asm/dtrace_syscall_types.h | 11 +++
 arch/x86/include/asm/syscall.h              |  8 ++
 arch/x86/kernel/dtrace_syscall.c            | 97 +++++++++++++++++++++
 arch/x86/kernel/dtrace_syscall_stubs.S      |  0
 include/linux/dtrace_syscall.h              | 60 +++++++++++++
 kernel/dtrace/Kconfig                       |  9 ++
 kernel/dtrace/Makefile                      |  1 +
 10 files changed, 197 insertions(+)
 create mode 100644 arch/x86/include/asm/dtrace_syscall.h
 create mode 100644 arch/x86/include/asm/dtrace_syscall_types.h
 create mode 100644 arch/x86/kernel/dtrace_syscall.c
 create mode 100644 arch/x86/kernel/dtrace_syscall_stubs.S
 create mode 100644 include/linux/dtrace_syscall.h

diff --git a/arch/x86/entry/syscall_32.c b/arch/x86/entry/syscall_32.c
index 86eb0d89d46f..66381ebd6a9f 100644
--- a/arch/x86/entry/syscall_32.c
+++ b/arch/x86/entry/syscall_32.c
@@ -15,7 +15,11 @@
 
 #define __SYSCALL_I386(nr, sym) [nr] = __ia32_##sym,
 
+#if IS_ENABLED(CONFIG_DT_SYSTRACE)
+__visible sys_call_ptr_t ia32_sys_call_table[__NR_ia32_syscall_max+1] = {
+#else
 __visible const sys_call_ptr_t ia32_sys_call_table[__NR_ia32_syscall_max+1] = {
+#endif /* CONFIG_DT_SYSTRACE || CONFIG_DT_SYSTRACE_MODULE */
 	/*
 	 * Smells like a compiler bug -- it doesn't work
 	 * when the & below is removed.
diff --git a/arch/x86/entry/syscall_64.c b/arch/x86/entry/syscall_64.c
index 1594ec72bcbb..42587831ef04 100644
--- a/arch/x86/entry/syscall_64.c
+++ b/arch/x86/entry/syscall_64.c
@@ -17,7 +17,11 @@
 
 #define __SYSCALL_64(nr, sym) [nr] = __x64_##sym,
 
+#if IS_ENABLED(CONFIG_DT_SYSTRACE)
+asmlinkage sys_call_ptr_t sys_call_table[__NR_syscall_max+1] = {
+#else
 asmlinkage const sys_call_ptr_t sys_call_table[__NR_syscall_max+1] = {
+#endif /* CONFIG_DT_SYSTRACE || CONFIG_DT_SYSTRACE_MODULE */
 	/*
 	 * Smells like a compiler bug -- it doesn't work
 	 * when the & below is removed.
diff --git a/arch/x86/include/asm/dtrace_syscall.h b/arch/x86/include/asm/dtrace_syscall.h
new file mode 100644
index 000000000000..402826562478
--- /dev/null
+++ b/arch/x86/include/asm/dtrace_syscall.h
@@ -0,0 +1,3 @@
+/*
+ * Copyright (c) 2011, 2018, Oracle and/or its affiliates. All rights reserved.
+ */
diff --git a/arch/x86/include/asm/dtrace_syscall_types.h b/arch/x86/include/asm/dtrace_syscall_types.h
new file mode 100644
index 000000000000..2b3ee563ad14
--- /dev/null
+++ b/arch/x86/include/asm/dtrace_syscall_types.h
@@ -0,0 +1,11 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (c) 2011, 2018, Oracle and/or its affiliates. All rights reserved.
+ */
+
+#include <linux/types.h>
+#include <linux/dtrace_types.h>
+
+typedef asmlinkage long (*dt_sys_call_t)(const struct pt_regs *regs);
+
+#define DTRACE_SYSCALL_WRAP_PREFIX "__x64_"
diff --git a/arch/x86/include/asm/syscall.h b/arch/x86/include/asm/syscall.h
index 7cbf733d11af..3d1bce850b74 100644
--- a/arch/x86/include/asm/syscall.h
+++ b/arch/x86/include/asm/syscall.h
@@ -17,15 +17,23 @@
 #include <asm/unistd.h>
 
 typedef long (*sys_call_ptr_t)(const struct pt_regs *);
+#if IS_ENABLED(CONFIG_DT_SYSTRACE)
+extern sys_call_ptr_t sys_call_table[];
+#else
 extern const sys_call_ptr_t sys_call_table[];
+#endif
 
 #if defined(CONFIG_X86_32)
 #define ia32_sys_call_table sys_call_table
 #endif
 
 #if defined(CONFIG_IA32_EMULATION)
+#if IS_ENABLED(CONFIG_DT_SYSTRACE)
+extern sys_call_ptr_t ia32_sys_call_table[];
+#else
 extern const sys_call_ptr_t ia32_sys_call_table[];
 #endif
+#endif
 
 #ifdef CONFIG_X86_X32_ABI
 extern const sys_call_ptr_t x32_sys_call_table[];
diff --git a/arch/x86/kernel/dtrace_syscall.c b/arch/x86/kernel/dtrace_syscall.c
new file mode 100644
index 000000000000..3328710e7050
--- /dev/null
+++ b/arch/x86/kernel/dtrace_syscall.c
@@ -0,0 +1,97 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * FILE:	dtrace_syscall.c
+ * DESCRIPTION:	Dynamic Tracing: system call tracing support (arch-specific)
+ *
+ * Copyright (C) 2010-2018 Oracle Corporation
+ */
+
+#include <linux/dtrace_cpu.h>
+#include <linux/dtrace_os.h>
+#include <linux/dtrace_syscall.h>
+#include <linux/fs.h>
+#include <linux/module.h>
+#include <linux/namei.h>
+#include <linux/sched.h>
+#include <asm/insn.h>
+#include <asm/stacktrace.h>
+#include <asm/syscalls.h>
+
+/*
+ * SYSTEM CALL TRACING SUPPORT
+ */
+void (*systrace_probe)(dtrace_id_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t,
+		       uintptr_t, uintptr_t, uintptr_t);
+
+void systrace_stub(dtrace_id_t id, uintptr_t arg0, uintptr_t arg1,
+		   uintptr_t arg2, uintptr_t arg3, uintptr_t arg4,
+		   uintptr_t arg5, uintptr_t arg6)
+{
+}
+
+asmlinkage long systrace_syscall(const struct pt_regs *regs);
+
+asmlinkage long dtrace_stub_ptregs(uintptr_t, uintptr_t, uintptr_t, uintptr_t,
+				   uintptr_t, uintptr_t, uintptr_t);
+
+static struct systrace_info	systrace_info =
+{
+	&systrace_probe,
+	systrace_stub,
+	systrace_syscall,
+	{},
+	{
+#define __SYSCALL_64(nr, sym)		[nr] { __stringify(sym), },
+#define __SYSCALL_COMMON(nr, sym)	__SYSCALL_64(nr, sym)
+#define __SYSCALL_X32(nt, sym)
+#include <asm/syscalls_64.h>
+	}
+};
+
+asmlinkage long systrace_syscall(const struct pt_regs *regs)
+{
+	long			rc = 0;
+	unsigned long		sysnum;
+	dtrace_id_t		id;
+	struct dtrace_syscalls	*sc;
+
+	sysnum = syscall_get_nr(current, (struct pt_regs *) regs);
+	sc = &systrace_info.sysent[sysnum];
+
+	/*
+	 * Note: 64-bit syscall-specific.
+	 */
+	id = sc->stsy_entry;
+	if (id != DTRACE_IDNONE)
+		(*systrace_probe)(id, regs->di, regs->si, regs->dx,
+				  regs->r10, regs->r8, regs->r9, 0);
+
+	/*
+	 * FIXME: Add stop functionality for DTrace.
+	 */
+
+	if (sc->stsy_underlying != NULL)
+		rc = (*sc->stsy_underlying)(regs);
+
+	id = sc->stsy_return;
+	if (id != DTRACE_IDNONE)
+		(*systrace_probe)(id, (uintptr_t)rc, (uintptr_t)rc,
+				  (uintptr_t)((uint64_t)rc >> 32), 0, 0, 0, 0);
+
+	return rc;
+}
+
+struct systrace_info *dtrace_syscalls_init(void)
+{
+	int			i;
+
+	for (i = 0; i < NR_syscalls; i++) {
+		systrace_info.sysent[i].stsy_tblent =
+					(dt_sys_call_t *)&sys_call_table[i];
+		systrace_info.sysent[i].stsy_underlying =
+					(dt_sys_call_t)sys_call_table[i];
+	}
+
+	return &systrace_info;
+}
+EXPORT_SYMBOL(dtrace_syscalls_init);
diff --git a/arch/x86/kernel/dtrace_syscall_stubs.S b/arch/x86/kernel/dtrace_syscall_stubs.S
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/include/linux/dtrace_syscall.h b/include/linux/dtrace_syscall.h
new file mode 100644
index 000000000000..7f9e351f3783
--- /dev/null
+++ b/include/linux/dtrace_syscall.h
@@ -0,0 +1,60 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (c) 2011, 2018, Oracle and/or its affiliates. All rights reserved.
+ */
+
+#ifndef _LINUX_DTRACE_SYSCALL_H_
+#define _LINUX_DTRACE_SYSCALL_H_
+
+#include <linux/types.h>
+#include <linux/dtrace_os.h>
+#include <asm/syscall.h>
+
+#define DTRACE_SYSCALL_STUB(t, n)      SCE_##t,
+enum dtrace_sce_id {
+	SCE_NONE = 0,
+#include <asm/dtrace_syscall.h>
+	SCE_nr_stubs
+};
+#undef DTRACE_SYSCALL_STUB
+
+#define DTRACE_SYSCALL_STUB(t, n) \
+	asmlinkage long dtrace_stub_##n(uintptr_t, uintptr_t, uintptr_t, \
+					uintptr_t, uintptr_t, uintptr_t, \
+					uintptr_t);
+#include <asm/dtrace_syscall.h>
+#undef DTRACE_SYSCALL_STUB
+
+#ifndef CONFIG_ARCH_HAS_SYSCALL_WRAPPER
+typedef asmlinkage long (*dt_sys_call_t)(uintptr_t, uintptr_t, uintptr_t,
+					 uintptr_t, uintptr_t, uintptr_t,
+					 uintptr_t);
+
+#define DTRACE_SYSCALL_WRAP_PREFIX ""
+#else
+#include <asm/dtrace_syscall_types.h>
+#endif
+
+struct dtrace_syscalls {
+	const char	*name;
+	dtrace_id_t	stsy_entry;
+	dtrace_id_t	stsy_return;
+	dt_sys_call_t	stsy_underlying;
+	dt_sys_call_t	*stsy_tblent;
+};
+
+typedef void (*dtrace_systrace_probe_t)(dtrace_id_t, uintptr_t, uintptr_t,
+					uintptr_t, uintptr_t, uintptr_t,
+					uintptr_t, uintptr_t);
+
+struct systrace_info {
+	dtrace_systrace_probe_t	*probep;
+	dtrace_systrace_probe_t	stub;
+	dt_sys_call_t		syscall;
+	dt_sys_call_t		stubs[SCE_nr_stubs];
+	struct dtrace_syscalls	sysent[NR_syscalls];
+};
+
+extern struct systrace_info *dtrace_syscalls_init(void);
+
+#endif /* _LINUX_DTRACE_SYSCALL_H_ */
diff --git a/kernel/dtrace/Kconfig b/kernel/dtrace/Kconfig
index 854e4411343f..d04ca0ab7ac9 100644
--- a/kernel/dtrace/Kconfig
+++ b/kernel/dtrace/Kconfig
@@ -23,6 +23,15 @@ config DT_CORE
 
 if DT_CORE
 
+config DT_SYSTRACE
+	tristate "System Call Tracing"
+	default m
+	select FTRACE
+	select FTRACE_SYSCALLS
+	help
+	  Provides DTrace probes at the entry and exit of all system calls,
+	  in the syscall provider.
+
 config DT_DT_TEST
 	tristate "DTrace Test Probe"
 	default m
diff --git a/kernel/dtrace/Makefile b/kernel/dtrace/Makefile
index 872785327c3d..68fc3861e5d1 100644
--- a/kernel/dtrace/Makefile
+++ b/kernel/dtrace/Makefile
@@ -3,6 +3,7 @@
 #
 
 DT_CORE_ARCH_OBJS		= $(addprefix ../../arch/$(SRCARCH)/kernel/, \
+				    dtrace_syscall.o dtrace_syscall_stubs.o \
 				    dtrace_util.o)
 
 ifdef CONFIG_DT_CORE
-- 
2.32.0

